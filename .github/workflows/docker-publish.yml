name: Docker

on:
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  schedule:
    - cron:  '47 19 * * *'

  # Run tests for any PRs.
  pull_request:

jobs:
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    strategy:
      fail-fast: false
      matrix:
        terraform: ['0.13', '0.14', '0.15', '1.0', 'latest']

    steps:
      - uses: actions/checkout@v2

      # Docker see https://blog.oddbit.com/post/2020-09-25-building-multi-architecture-im/
      - name: Prepare
        id: prep
        run: |
          REPONAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]' )
          DOCKER_IMAGE=ghcr.io/$REPONAME
          VERSION=latest
          TERRAGRUNT_VERSION=$(curl -sSL https://api.github.com/repos/gruntwork-io/terragrunt/tags | jq -r '.[] | .name' | head -n1)
          TERRAFORM_VERSION=""

          if [ "${{ matrix.terraform }}" != 'latest' ]; then
            VERSION="v${{ matrix.terraform }}"
            TAG_PAGE=1
            while [ -z "$TERRAFORM_VERSION" -a $TAG_PAGE -le 10 ]; do
                echo "$TERRAFORM_VERSION - $TAG_PAGE"
                TERRAFORM_VERSION=$(curl -sSL "https://api.github.com/repos/hashicorp/terraform/tags?page=$TAG_PAGE" | jq -r '.[] | .name  | select(. | startswith("v${{ matrix.terraform }}."))' | head -n1)
                let "TAG_PAGE=TAG_PAGE+1"
                sleep 10
            done
          else
            TERRAFORM_VERSION="$(curl -sSL https://api.github.com/repos/hashicorp/terraform/tags | jq -r '.[] | .name' | head -n1)"
          fi

          SHORTREF=${GITHUB_SHA::8}
          TAGS="${DOCKER_IMAGE}:${VERSION},${DOCKER_IMAGE}:${TERRAFORM_VERSION}"

          # Set output parameters.
          echo ::set-output name=shortref::${SHORTREF}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=docker_image::${DOCKER_IMAGE}
          echo ::set-output name=terraform_version::${TERRAFORM_VERSION:1}
          echo ::set-output name=terragrunt_version::${TERRAGRUNT_VERSION:1}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          build-args: |
            TERRAFORM_VERSION=${{ steps.prep.outputs.terraform_version }}
            TERRAGRUNT_VERSION=${{ steps.prep.outputs.terragrunt_version }}
          push: true
          tags: ${{ steps.prep.outputs.tags }}
